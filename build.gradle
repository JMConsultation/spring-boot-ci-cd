/*
 * This file was generated by the Gradle 'init' task.
 */
import java.time.LocalDateTime

buildscript {
    dependencies {
        classpath "com.netflix.nebula:nebula-release-plugin:6.3.3"
        classpath "com.netflix.nebula:nebula-publishing-plugin:7.1.0"
    }
}

plugins {
    id 'org.springframework.boot' version '2.1.1.RELEASE'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id 'java'
    id 'maven-publish'
//    id 'org.ajoberstar.grgit' version '1.7.1'
}

apply plugin: "nebula.release"
apply plugin: "nebula.maven-publish"
apply plugin: "nebula.javadoc-jar"
apply plugin: "nebula.source-jar"

repositories {
    mavenLocal()
    jcenter()
    mavenCentral()
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:Greenwich.SR1"
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    runtimeOnly 'org.springframework.boot:spring-boot-devtools'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

group = 'org.ss.department'
//version = '1.0-SNAPSHOT'
sourceCompatibility = '1.8'

publishing {
    publications {
        maven(MavenPublication) {
            from(components.java)
        }
    }
}

bootJar {
    archiveFileName = 'application.jar'
    exclude("**/generated-gradle-jars/*")
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

task copyJar(type: Copy) {
    from 'Dockerfile'
    into 'build'
}

task dockerBuild(type: Exec) {
    workingDir 'build'
    executable "docker"
    args "build", ".", "-t", "${docker_registry}:${version}"
}

task dockerPush(type: Exec) {
    workingDir 'build'
    executable "docker"
    args "push", "${docker_registry}:${version}"
}

task helmDeploy(type: Exec){
    commandLine  "./helm", "--kubeconfig=kubeconfig.yaml", "upgrade", "spring-boot-app","./chart","--set", "image.repository=${docker_registry}", "--set", "image.tag=${version}", "--set", "timestamp=${getTimeNow()}"
}

dockerPush.dependsOn(dockerBuild)
copyJar.dependsOn(build)
dockerBuild.dependsOn(copyJar)

def getTimeNow(){
    LocalDateTime.now().toString()
}
